#!/bin/bash

#              ,---------------------------,
#              |  /---------------------\  |
#              | |                       | |
#              | |     Jack Nemitz       | |
#              | |      .dotfiles        | |
#              | |  functions_template   | |
#              | |                       | |
#              |  \_____________________/  |
#              |___________________________|
#            ,---\_____     []     _______/------,
#          /         /______________\           /|
#        /___________________________________ /  | ___
#        |                                   |   |    )
#        |  _ _ _                 [-------]  |   |   (
#        |  o o o                 [-------]  |  /    _)_
#        |__________________________________ |/     /  /
#    /-------------------------------------/|      ( )/
#  /-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/ /
#/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/ /
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ 

'''
This template is built off of the .funcitons setup that I use.
Due to personal information confidentiality, I made a template rather than publishing my personal configurations.
Some areas of this template have been redacted for this reason. I have put comments where you will need to provide your own information for these funcitons to work properly.
'''

###############################################
################# File System #################
###############################################

# Create a new directory and enter it
function mkd() {
  mkdir -p "$@" && cd "$_";
}

# Copy current working directory (adding arg 1 will copy path to that file)
function thispath(){
  if [ $# -eq 1 ]
    then
      wd=`pwd`;
      pa="${wd}/${1}";
      command echo $pa | pbcopy;
    else
      command pwd | pbcopy;
  fi
};

function symlink() {
  gum style \
	--foreground 212 --border-foreground 212 --border double \
	--align center --width 50 --margin "0 1" --padding "0 1" \
	'Select file to create a link...';
  file=$(gum file -a);
  echo "Creating link to $file...";
  gum style \
	--foreground 212 --border-foreground 212 --border double \
	--align center --width 50 --margin "0 1" --padding "0 1" \
	'Path to new link...';
  link=$(gum input --placeholder "$(pwd)/...");
  echo "Linking to $link...";
  gum confirm && (ln -s ./$file ./$link && echo "Created link $link -> $file") || echo "Cancelled symlink...";
}

function removePath() { 
    export PATH="$( echo $PATH| tr : '\n' |grep -v $1 | paste -s -d: )"
}

###############################################
################ Git Functions ################
###############################################

# Auto commit/push
function gitit() {
    command git status;
    command git add .;
    command git commit -m "auto commit";
    command git push;
};

# List branches and prompt to switch to a branch
function gcheck() {
  branches=();
  count=0;
  for branch in $(git for-each-ref refs/heads  | cut -d/ -f3-); do
      (( count++ ))
      branches+=($branch)
  done
  gum style \
	--foreground 212 --border-foreground 212 --border double \
	--align center --width 50 --margin "0 1" --padding "0 1" \
	'Git Checkout...'
  choise=$(gum choose "${branches[@]}");
  git checkout ${choise};
};

function git_comm() {
  type=$(gum choose --cursor.foreground 182  "add" "implement" "update" "fix" "bug" "remove" "feat" "refactor" "docs" "other");
  if [ "$type" == "other" ]; then
    type=$(gum input --placeholder "Enter a custom commit type...");
  fi;
  gum style \
	--foreground 182 --border-foreground 182 --border rounded \
	--align center --width 25 --margin "0 0" --padding "0 0" \
	'Commit';
  title=$(gum input --width 72 --char-limit 72 --value "$type: ");
  gum style \
	--foreground 153 --border none \
	--align left --width 50 --margin "1 0 1 1" --padding "0 0" \
	"$title";
  what=$'|What:\n';
  gum style \
  --foreground 153 --border none \
  --align left --width 50 --margin "0 0 1 2" --padding "0 1" \
  "|What: ";
  inp=' ';
  while [ "$inp" != '' ]
  do 
    inp=$(gum input --prompt "     - " --placeholder "WHAT functionally changed or press enter to submit");
    if [ "$inp" != '' ]; then
      gum style \
      --foreground 153 --border none \
      --align left --width 50 --margin "0 0 0 2" --padding "0 1" \
      "  • $inp";
      what="$what"$'  - '"$inp";
    fi;
  done;
  why=$'|Why:\n';
  gum style \
  --foreground 153 --border none \
  --align left --width 50 --margin "1 0 1 2" --padding "0 1" \
  "|Why: ";
  inp=' ';
  while [ "$inp" != '' ]
  do 
    inp=$(gum input --prompt "     - " --placeholder "WHY the change was made or press enter to submit");
    if [ "$inp" != '' ]; then
      gum style \
      --foreground 153 --border none \
      --align left --width 50 --margin "0 0 0 2" --padding "0 1" \
      "  • $inp";
      why="$why"$'  - '"$inp";
    fi;
  done;
  git commit -m "$title" -m "$what"$'\n\n'"$why";
};

###############################################
################ SSH Functions ################
###############################################

# function ssend(){
#     read -p 'path to file: ' path;
#     read -p 'machine to send to: ' location;
#     scp
# }

###############################################
################ Gen Functions ################
###############################################

function goodnight() {
    command sudo tmutil stopbackup;
    for v in /Volumes/*; do
    if [[ $v != *"Macintosh HD" && $v != *"Recovery"* && $v != "pi" ]]; then
        echo "Unmounting $v..."
        command diskutil unmount "/$v";
        echo
    fi;
    done
    count=10;
    while [[ count -gt 0 ]]; do
        count=$((count-1));
        echo "Computer will sleep in: ${count}";
        command sleep 1;
    done
    command pmset sleepnow;
};

