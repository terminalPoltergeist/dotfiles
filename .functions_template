#!/bin/bash

#              ,---------------------------,
#              |  /---------------------\  |
#              | |                       | |
#              | |     Jack Nemitz       | |
#              | |      .dotfiles        | |
#              | |  functions_template   | |
#              | |                       | |
#              |  \_____________________/  |
#              |___________________________|
#            ,---\_____     []     _______/------,
#          /         /______________\           /|
#        /___________________________________ /  | ___
#        |                                   |   |    )
#        |  _ _ _                 [-------]  |   |   (
#        |  o o o                 [-------]  |  /    _)_
#        |__________________________________ |/     /  /
#    /-------------------------------------/|      ( )/
#  /-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/ /
#/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/ /
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ 

'''
This template is built off of the .funcitons setup that I use.
Due to personal information confidentiality, I made a template rather than publishing my personal configurations.
Some areas of this template have been redacted for this reason. I have put comments where you will need to provide your own information for these funcitons to work properly.
'''

###############################################
################# File System #################
###############################################

# Create a new directory and enter it
function mkd() {
    mkdir -p "$@" && cd "$_";
}

# Copy current working directory (adding arg 1 will copy path to that file)
function thispath(){
    if [ $# -eq 1 ]
        then
            wd=`pwd`;
            pa="${wd}/${1}";
            command echo $pa | pbcopy;
        else
            command pwd | pbcopy;
    fi
};

function symlink() {
    read -p "Path to actual file: " path;
    read -p "Path to link (will point to actual file): " link;
    ln -s ~/$path ~/$link;
}

function removePath() { 
    export PATH="$( echo $PATH| tr : '\n' |grep -v $1 | paste -s -d: )"
}

###############################################
################ Git Functions ################
###############################################

# Auto commit/push
function gitit() {
    command git status;
    command git add .;
    command git commit -m "auto commit";
    command git push;
};

# List branches and prompt to switch to a branch
function gcheck() {
    branches=();
    count=0;
    echo "Availible branches:"
    for branch in $(git for-each-ref refs/heads  | cut -d/ -f3-); do
        (( count++ ))
        echo "$count) $branch"
        branches+=($branch)
    done
    read -p 'Branch: ' ans;
    command git checkout "${branches[$ans-1]}";
};

###############################################
################ SSH Functions ################
###############################################

# function ssend(){
#     read -p 'path to file: ' path;
#     read -p 'machine to send to: ' location;
#     scp
# }

###############################################
################ Gen Functions ################
###############################################

function goodnight() {
    command sudo tmutil stopbackup;
    for v in /Volumes/*; do
    if [[ $v != *"Macintosh HD" && $v != *"Recovery"* && $v != "pi" ]]; then
        echo "Unmounting $v..."
        command diskutil unmount "/$v";
        echo
    fi;
    done
    count=10;
    while [[ count -gt 0 ]]; do
        count=$((count-1));
        echo "Computer will sleep in: ${count}";
        command sleep 1;
    done
    command pmset sleepnow;
};

