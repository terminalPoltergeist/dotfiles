#              ,---------------------------,
#              |  /---------------------\  |
#              | |                       | |
#              | |     Jack Nemitz       | |
#              | |      .dotfiles        | |
#              | |        prompt         | |
#              | |                       | |
#              |  \_____________________/  |
#              |___________________________|
#            ,---\_____     []     _______/------,
#          /         /______________\           /|
#        /___________________________________ /  | ___
#        |                                   |   |    )
#        |  _ _ _                 [-------]  |   |   (
#        |  o o o                 [-------]  |  /    _)_
#        |__________________________________ |/     /  /
#    /-------------------------------------/|      ( )/
#  /-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/ /
#/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/ /
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ 

setopt prompt_subst # enable variable expansion
NEWLINE=$'\n'
PS1='%F{red}$(prompt_ssh)$(prompt_venv)'
PS1+='%F{yellow}%~ '
PS1+='%F{blue}$(prompt_git)'
PS1+='%F{white}%T${NEWLINE}$ '
export PS1;                             # Exports the prompt global

prompt_ssh(){
  session=$(echo $SSH_TTY)

  if [[ -n $session ]]; then
    echo -e "%n %F{white}@ %F{red}%m "
  fi
}

prompt_venv(){
  venv=$(echo $VIRTUAL_ENV | rev | cut -d '/' -f 1 | rev)

  if [ -n $venv ] && [[ $PS1 != *"$venv"* ]]; then
    # venv is active and not displayed in prompt
    echo -e "($venv) "
  fi
}

# I got this function online but can't remember where. It basically provides information for a git repo in the cmd line prompt when in a git repo. The function is called above in the prompt customization.
prompt_git() {
  local s='';
  local branchName='';
  local author='';

  # Check if the current directory is in a Git repository.
  $(git rev-parse --is-inside-work-tree &>/dev/null);
  if [[ $? == 0 ]]; then
    # Check for what branch we’re on.
    # Get the short symbolic ref. If HEAD isn’t a symbolic ref, get a
    # tracking remote branch or tag. Otherwise, get the
    # short SHA for the latest commit, or give up.
    branchName="on $(git symbolic-ref --quiet --short HEAD 2> /dev/null || \
      git describe --all --exact-match HEAD 2> /dev/null || \
      git rev-parse --short HEAD 2> /dev/null || \
      echo '(unknown)')";

    # Early exit for Chromium & Blink repo, as the dirty check takes too long.
    # Thanks, @paulirish!
    # https://github.com/paulirish/dotfiles/blob/dd33151f/.bash_prompt#L110-L123
    repoUrl="$(git config --get remote.origin.url)";

    if [[ $repoUrl == *"github.umn.edu"* ]]; then
      if [[ $(git config user.name) == "terminalPoltergeist" || $(git config user.name) == "nemit031" ]]; then
        git config user.name jack
        git config user.email jack@umn.edu
      fi
    fi
    if [[ $repoUrl == *"github.com"* ]]; then
      if [[ $(git config user.name) == "jack" ]]; then
        git config user.name terminalPoltergeist
      fi
      if [[ $(git config user.email) == "jack@umn.edu" ]]; then
        git config user.email jack.nemitz@yahoo.com
      fi
    fi

    author=" as $(git config user.name) ";
    if grep -q 'chromium/src.git' <<< "${repoUrl}"; then
      s+='*';
    else
      # Check for untracked files.
      if [ -n "$(git ls-files --others --exclude-standard)" ]; then
        s+='\xF0\x9F\x93\x8C'; # pin
      fi;
      # Check for unstaged changes.
      if ! $(git diff-files --quiet --ignore-submodules --); then
        s+='\xF0\x9F\x90\x99'; # octopus
      fi;
      # Check for uncommitted changes in the index.
      if ! $(git diff --quiet --ignore-submodules --cached); then
        s+='\xF0\x9F\x92\xBE'; # floppy
      fi;
      # Check for stashed files.
      if $(git rev-parse --verify refs/stash &>/dev/null); then
        s+='\xF0\x9F\x92\xBC'; # briefcase
      fi;
      # Check for unpushed commits.
      if [ -n "$(git log @{u}..)" ]; then
        s+='\xF0\x9F\x9A\x80'; # rocketship
      fi;
    fi;

    [ -n "${s}" ] && s="${s} ";

  else
      branchName="";
  fi;

  echo -e "${s}${1}${branchName}${2}${author}";

}
